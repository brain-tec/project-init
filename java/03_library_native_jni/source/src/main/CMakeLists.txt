# Copyright (C) ${{VAR_COPYRIGHT_YEAR}} ${{VAR_COPYRIGHT_HOLDER}}

#==================================[ TARGET ]==================================
# Native library ${{VAR_PROJECT_NAME}} using JNI

set(${{VAR_PROJECT_NAME_UPPER}}_TARGET_LIB_JNI_MAIN ${{VAR_PROJECT_NAME_LOWER}}java)

add_library(
    ${${{VAR_PROJECT_NAME_UPPER}}_TARGET_LIB_JNI_MAIN}
    SHARED
    ${{VAR_CMAKE_LANG_IDENTIFIER}}/jni/${{VAR_NAMESPACE_UNDERSCORE}}_StringComparator.${{VAR_CMAKE_LANG_IDENTIFIER}}
    ${{VAR_CMAKE_LANG_IDENTIFIER}}/${{VAR_NAMESPACE_PATH}}/${{VAR_CMAKE_ADD_LIBRARY_FILE}}
)

# We want to include the application JNI headers generated by the javac
# compiler in the build directory and everything under
# the source include directory
target_include_directories(
    ${${{VAR_PROJECT_NAME_UPPER}}_TARGET_LIB_JNI_MAIN}
    PUBLIC
    "$<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/jni-headers>"
    "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
    PRIVATE
    ${{VAR_CMAKE_LANG_IDENTIFIER}}
)

# Find the common and platform-dependent JNI headers.
# We take the ones from the JDK pointed to by
# the 'JAVA_HOME' environment variable.
if(NOT DEFINED ENV{JAVA_HOME})
    message(FATAL_ERROR "Environment variable 'JAVA_HOME' is not set")
endif()

# Common JNI header
SET(JAVA_JNI_INCLUDE_JNI "$ENV{JAVA_HOME}/include")

# Platform-dependent JNI headers
if(EXISTS "${JAVA_JNI_INCLUDE_JNI}/linux")
    SET(JAVA_JNI_INCLUDE_PLATFORM "${JAVA_JNI_INCLUDE_JNI}/linux")
elseif(EXISTS "${JAVA_JNI_INCLUDE_JNI}/win32")
    SET(JAVA_JNI_INCLUDE_PLATFORM "${JAVA_JNI_INCLUDE_JNI}/win32")
else()
    message(FATAL_ERROR "Cannot set JNI include path for this platform")
endif()

# Make JNI headers from the JDK available
target_include_directories(
    ${${{VAR_PROJECT_NAME_UPPER}}_TARGET_LIB_JNI_MAIN}
    SYSTEM
    PUBLIC
    "${JAVA_JNI_INCLUDE_JNI}"
    "${JAVA_JNI_INCLUDE_PLATFORM}"
)

# Put the final shared library in the build root directory
set_target_properties(
    ${${{VAR_PROJECT_NAME_UPPER}}_TARGET_LIB_JNI_MAIN}
    PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
)

#===================================[ TESTS ]==================================
# Native library ${{VAR_PROJECT_NAME}} tests

if(${{VAR_PROJECT_NAME_UPPER}}_BUILD_TESTS)
    add_subdirectory(../test tests)
endif()
